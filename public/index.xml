<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GopherBOOk</title>
    <link>http://gopherbook.iris-go.com/index.xml</link>
    <description>Recent content on GopherBOOk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://gopherbook.iris-go.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hello World</title>
      <link>http://gopherbook.iris-go.com/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gopherbook.iris-go.com/hello-world/</guid>
      <description>

&lt;h1 id=&#34;go-web-examples-hello-world&#34;&gt;&lt;a href=&#34;http://gopherbook.iris-go.com/&#34;&gt;Go Web Examples:&lt;/a&gt; Hello World&lt;/h1&gt;

&lt;p&gt;This example will show how to start a webserver on port 8080 and print the classic &amp;ldquo;hello world&amp;rdquo; message.&lt;/p&gt;

&lt;p&gt;For this we have to actually &lt;a target=&#34;_blank&#34; href=&#34;https://golang.org/doc/articles/go_command.html#tmp_3&#34;&gt;go get&lt;/a&gt; the popular &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/kataras/iris&#34;&gt;kataras/iris&lt;/a&gt; library like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get gopkg.in/kataras/iris.v6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From now on, every application we write will be able to make use of this library!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// hello-world.go
package main

import (
    &amp;quot;gopkg.in/kataras/iris.v6&amp;quot;
    &amp;quot;gopkg.in/kataras/iris.v6/adaptors/httprouter&amp;quot;
)

func main() {
    app := iris.New()
    // Adapt the &amp;quot;httprouter&amp;quot;, faster,
    // but it has limits on named path parameters&#39; validation,
    // you can adapt &amp;quot;gorillamux&amp;quot; if you need regexp path validation!
    app.Adapt(httprouter.New())

    app.HandleFunc(&amp;quot;GET&amp;quot;, &amp;quot;/&amp;quot;, func(ctx *iris.Context) {
        ctx.Writef(&amp;quot;hello world\n&amp;quot;)
    })

    app.Listen(&amp;quot;:8080&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run hello-world.go

$ curl -s http://localhost:8080/
hello world
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Routes (using httprouter)</title>
      <link>http://gopherbook.iris-go.com/routes-using-httprouter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gopherbook.iris-go.com/routes-using-httprouter/</guid>
      <description>

&lt;h1 id=&#34;go-web-examples-routes-using-httprouter&#34;&gt;&lt;a href=&#34;http://gopherbook.iris-go.com/&#34;&gt;Go Web Examples:&lt;/a&gt; Routes (using httprouter)&lt;/h1&gt;

&lt;p&gt;This example will show how to register routes using the popular &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/julienschmidt/httprouter&#34;&gt;httprouter&lt;/a&gt; router.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// routes.go
package main

import (
    &amp;quot;gopkg.in/kataras/iris.v6&amp;quot;
    &amp;quot;gopkg.in/kataras/iris.v6/adaptors/httprouter&amp;quot;
)

func main() {
    app := iris.New()
    app.Adapt(httprouter.New())

    userAges := map[string]int{
        &amp;quot;Alice&amp;quot;:  25,
        &amp;quot;Bob&amp;quot;:    30,
        &amp;quot;Claire&amp;quot;: 29,
    }

    // Equivalent with app.HandleFunc(&amp;quot;GET&amp;quot;, ...)
    app.Get(&amp;quot;/users/:name&amp;quot;, func(ctx *iris.Context) {
        name := ctx.Param(&amp;quot;name&amp;quot;)
        age := userAges[name]

        ctx.Writef(&amp;quot;%s is %d years old!&amp;quot;, name, age)
    })

    app.Listen(&amp;quot;:8080&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run routes.go

$ curl -s http://localhost:8080/users/Bob
Bob is 30 years old!
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Routes (using gorillamux)</title>
      <link>http://gopherbook.iris-go.com/routes-using-gorillamux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gopherbook.iris-go.com/routes-using-gorillamux/</guid>
      <description>

&lt;h1 id=&#34;go-web-examples-routes-using-gorillamux&#34;&gt;&lt;a href=&#34;http://gopherbook.iris-go.com/&#34;&gt;Go Web Examples:&lt;/a&gt; Routes (using gorillamux)&lt;/h1&gt;

&lt;p&gt;This example will show how to register routes using the popular &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/gorilla/mux&#34;&gt;gorillamux&lt;/a&gt; router.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// routes.go
package main

import (
    &amp;quot;gopkg.in/kataras/iris.v6&amp;quot;
    &amp;quot;gopkg.in/kataras/iris.v6/adaptors/gorillamux&amp;quot;
)

func main() {
    app := iris.New()
    // Adapt the &amp;quot;httprouter&amp;quot;, you can use &amp;quot;gorillamux&amp;quot; too.
    app.Adapt(gorillamux.New())

    userAges := map[string]int{
        &amp;quot;Alice&amp;quot;:  25,
        &amp;quot;Bob&amp;quot;:    30,
        &amp;quot;Claire&amp;quot;: 29,
    }

    // Equivalent with app.HandleFunc(&amp;quot;GET&amp;quot;, ...)
    app.Get(&amp;quot;/users/{name}&amp;quot;, func(ctx *iris.Context) {
        name := ctx.Param(&amp;quot;name&amp;quot;)
        age := userAges[name]

        ctx.Writef(&amp;quot;%s is %d years old!&amp;quot;, name, age)
    })

    app.Listen(&amp;quot;:8080&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run routes.go

$ curl -s http://localhost:8080/users/Bob
Bob is 30 years old!
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Templates</title>
      <link>http://gopherbook.iris-go.com/templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gopherbook.iris-go.com/templates/</guid>
      <description>

&lt;h1 id=&#34;go-web-examples-templates&#34;&gt;&lt;a href=&#34;http://gopherbook.iris-go.com/&#34;&gt;Go Web Examples:&lt;/a&gt; Templates&lt;/h1&gt;

&lt;p&gt;This example will show how to render a simple list of TODO items into an html page using the &lt;code&gt;html/template view adaptor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Iris supports 5 template engines out-of-the-box, you can still use any external golang template engine,
as &lt;code&gt;context.ResponseWriter&lt;/code&gt; is an &lt;code&gt;io.Writer&lt;/code&gt; and &lt;code&gt;http.ResponseWriter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All of these five template engines have common features with common API,
like Layout, Template Funcs, Party-specific layout, partial rendering and more.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  The standard html, based on github.com/kataras/go-template/tree/master/html
  its template parser is the golang.org/pkg/html/template/.

  Django, based ongithub.com/kataras/go-template/tree/master/django
  its template parser is the github.com/flosch/pongo2

  Pug(Jade), based on github.com/kataras/go-template/tree/master/pug
  its template parser is the github.com/Joker/jade

  Handlebars, based on github.com/kataras/go-template/tree/master/handlebars
  its template parser is the github.com/aymerick/raymond

  Amber, based on github.com/kataras/go-template/tree/master/amber
  its template parser is the github.com/eknkc/amber
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View engine is the &lt;code&gt;adaptors/view&lt;/code&gt; package.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;standard html  | view.HTML(&amp;hellip;)&lt;/li&gt;
&lt;li&gt;django         | view.Django(&amp;hellip;)&lt;/li&gt;
&lt;li&gt;pug(jade)      | view.Pug(&amp;hellip;)&lt;/li&gt;
&lt;li&gt;handlebars     | view.Handlebars(&amp;hellip;)&lt;/li&gt;
&lt;li&gt;amber          | view.Amber(&amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;// todos.go
package main

import (
    &amp;quot;gopkg.in/kataras/iris.v6&amp;quot;
    &amp;quot;gopkg.in/kataras/iris.v6/adaptors/httprouter&amp;quot;
    &amp;quot;gopkg.in/kataras/iris.v6/adaptors/view&amp;quot;
)

// Todo bind struct
type Todo struct {
    Task string
    Done bool
}

func main() {
    // Configuration is optional
    app := iris.New(iris.Configuration{Gzip: false, Charset: &amp;quot;UTF-8&amp;quot;})

    // Adapt a logger which will print all errors to os.Stdout
    app.Adapt(iris.DevLogger())

    // Adapt the httprouter (we will use that on all examples)
    app.Adapt(httprouter.New())

    // Parse all files inside `./mytemplates` directory ending with `.html`
    app.Adapt(view.HTML(&amp;quot;./mytemplates&amp;quot;, &amp;quot;.html&amp;quot;))

    todos := []Todo{
        {&amp;quot;Learn Go&amp;quot;, true},
        {&amp;quot;Read GopherBOOk&amp;quot;, true},
        {&amp;quot;Create a web app in Go&amp;quot;, false},
    }

    app.Get(&amp;quot;/&amp;quot;, func(ctx *iris.Context) {
        ctx.Render(&amp;quot;todos.html&amp;quot;, struct{ Todos []Todo }{todos})
    })

    app.Listen(&amp;quot;:8080&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- mytemplates/todos.html --&amp;gt;
&amp;lt;h1&amp;gt;Todos&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;
    {{range .Todos}}
        {{if .Done}}
            &amp;lt;li&amp;gt;&amp;lt;s&amp;gt;{{.Task}}&amp;lt;/s&amp;gt;&amp;lt;/li&amp;gt;
        {{else}}
            &amp;lt;li&amp;gt;{{.Task}}&amp;lt;/li&amp;gt;
        {{end}}
    {{end}}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run todos.go
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;demo&#34;&gt;
    &lt;h1&gt;Todos&lt;/h1&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;s&gt;Learn Go&lt;/s&gt;&lt;/li&gt;
        &lt;li&gt;&lt;s&gt;Read Go Web Examples&lt;/s&gt;&lt;/li&gt;
        &lt;li&gt;Create a web app in Go&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Forms</title>
      <link>http://gopherbook.iris-go.com/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gopherbook.iris-go.com/forms/</guid>
      <description>

&lt;h1 id=&#34;go-web-examples-forms&#34;&gt;&lt;a href=&#34;http://gopherbook.iris-go.com/&#34;&gt;Go Web Examples:&lt;/a&gt; Forms&lt;/h1&gt;

&lt;p&gt;This example will show how to simulate a contact form and parse the message into a struct.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// forms.go
package main

import (
    &amp;quot;gopkg.in/kataras/iris.v6&amp;quot;
    &amp;quot;gopkg.in/kataras/iris.v6/adaptors/httprouter&amp;quot;
    &amp;quot;gopkg.in/kataras/iris.v6/adaptors/view&amp;quot;
)

// ContactDetails the information from user
type ContactDetails struct {
    Email   string
    Subject string
    Message string
}

func main() {
    app := iris.New()
    app.Adapt(httprouter.New())

    // Parse all files inside `./mytemplates` directory ending with `.html`
    app.Adapt(view.HTML(&amp;quot;./mytemplates&amp;quot;, &amp;quot;.html&amp;quot;))

    app.Get(&amp;quot;/&amp;quot;, func(ctx *iris.Context) {
        ctx.Render(&amp;quot;forms.html&amp;quot;, nil)
    })

    // Equivalent with app.HandleFunc(&amp;quot;POST&amp;quot;, ...)
    app.Post(&amp;quot;/&amp;quot;, func(ctx *iris.Context) {

        // details := ContactDetails{
        //  Email:   ctx.FormValue(&amp;quot;email&amp;quot;),
        //  Subject: ctx.FormValue(&amp;quot;subject&amp;quot;),
        //  Message: ctx.FormValue(&amp;quot;message&amp;quot;),
        // }

        // or simply:
        var details ContactDetails
        ctx.ReadForm(&amp;amp;details)
        
        // do something with details
        _ = details

        ctx.Render(&amp;quot;forms.html&amp;quot;, struct{ Success bool }{true})
    })

    app.Listen(&amp;quot;:8080&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- mytemplates/forms.html --&amp;gt;
{{if .Success}}
    &amp;lt;h1&amp;gt;Thanks for your message!&amp;lt;/h1&amp;gt;
{{else}}
    &amp;lt;h1&amp;gt;Contact&amp;lt;/h1&amp;gt;
    &amp;lt;form method=&amp;quot;POST&amp;quot;&amp;gt;
        &amp;lt;label&amp;gt;Email:&amp;lt;/label&amp;gt;&amp;lt;br /&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;email&amp;quot;&amp;gt;&amp;lt;br /&amp;gt;
        &amp;lt;label&amp;gt;Subject:&amp;lt;/label&amp;gt;&amp;lt;br /&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;subject&amp;quot;&amp;gt;&amp;lt;br /&amp;gt;
        &amp;lt;label&amp;gt;Message:&amp;lt;/label&amp;gt;&amp;lt;br /&amp;gt;
        &amp;lt;textarea name=&amp;quot;message&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;br /&amp;gt;
        &amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt;
    &amp;lt;/form&amp;gt;
{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run forms.go
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;demo&#34;&gt;
    &lt;h1&gt;Contact&lt;/h1&gt;
    &lt;form method=&#34;POST&#34;&gt;
        &lt;label&gt;Email:&lt;/label&gt;&lt;br /&gt;
        &lt;input type=&#34;text&#34; name=&#34;email&#34;&gt;&lt;br /&gt;
        &lt;label&gt;Subject:&lt;/label&gt;&lt;br /&gt;
        &lt;input type=&#34;text&#34; name=&#34;subject&#34;&gt;&lt;br /&gt;
        &lt;label&gt;Message:&lt;/label&gt;&lt;br /&gt;
        &lt;textarea name=&#34;message&#34;&gt;&lt;/textarea&gt;&lt;br /&gt;
        &lt;input type=&#34;submit&#34;&gt;
    &lt;/form&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>JSON</title>
      <link>http://gopherbook.iris-go.com/json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gopherbook.iris-go.com/json/</guid>
      <description>

&lt;h1 id=&#34;go-web-examples-json&#34;&gt;&lt;a href=&#34;http://gopherbook.iris-go.com/&#34;&gt;Go Web Examples:&lt;/a&gt; JSON&lt;/h1&gt;

&lt;p&gt;This example will show how to encode and decode JSON data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// json.go
package main

import (
    &amp;quot;gopkg.in/kataras/iris.v6&amp;quot;
    &amp;quot;gopkg.in/kataras/iris.v6/adaptors/httprouter&amp;quot;
)

// User bind struct
type User struct {
    Firstname string `json:&amp;quot;firstname&amp;quot;`
    Lastname  string `json:&amp;quot;lastname&amp;quot;`
    Age       int    `json:&amp;quot;age&amp;quot;`
}

func main() {
    app := iris.New()
    app.Adapt(httprouter.New())

    app.Post(&amp;quot;/decode&amp;quot;, func(ctx *iris.Context) {
        var user User
        ctx.ReadJSON(&amp;amp;user)

        ctx.Writef(&amp;quot;%s %s is %d years old!&amp;quot;, user.Firstname, user.Lastname, user.Age)
    })

    app.Get(&amp;quot;/encode&amp;quot;, func(ctx *iris.Context) {
        peter := User{
            Firstname: &amp;quot;John&amp;quot;,
            Lastname:  &amp;quot;Doe&amp;quot;,
            Age:       25,
        }

        ctx.JSON(iris.StatusOK, peter)
    })

    app.Listen(&amp;quot;:8080&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run json.go

$ curl -s -XPOST -d&#39;{&amp;quot;firstname&amp;quot;:&amp;quot;Donald&amp;quot;,&amp;quot;lastname&amp;quot;:&amp;quot;Trump&amp;quot;,&amp;quot;age&amp;quot;:70}&#39; http://localhost:8080/decode
Donald Trump is 70 years old!

$ curl -s http://localhost:8080/encode
{&amp;quot;firstname&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastname&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:25}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Static Files</title>
      <link>http://gopherbook.iris-go.com/static-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gopherbook.iris-go.com/static-files/</guid>
      <description>

&lt;h1 id=&#34;go-web-examples-static-files&#34;&gt;&lt;a href=&#34;http://gopherbook.iris-go.com/&#34;&gt;Go Web Examples:&lt;/a&gt; Static Files&lt;/h1&gt;

&lt;p&gt;This example will show how to serve static files like CSSs, JavaScripts or images from a specific directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// static-files.go
package main

import (
    &amp;quot;gopkg.in/kataras/iris.v6&amp;quot;
    &amp;quot;gopkg.in/kataras/iris.v6/adaptors/httprouter&amp;quot;
)

func main() {
    app := iris.New()
    app.Adapt(httprouter.New())
    // first parameter is the request path
    // second is the operating system directory
    app.StaticWeb(&amp;quot;/static&amp;quot;, &amp;quot;./assets&amp;quot;)

    app.Listen(&amp;quot;:8080&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ tree assets/
assets/
└── css
    └── styles.css
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run static-files.go

$ curl -s http://localhost:8080/static/css/styles.css
body {
    background-color: black;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Upload Files</title>
      <link>http://gopherbook.iris-go.com/upload-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gopherbook.iris-go.com/upload-files/</guid>
      <description>

&lt;h1 id=&#34;go-web-examples-upload-files&#34;&gt;&lt;a href=&#34;http://gopherbook.iris-go.com/&#34;&gt;Go Web Examples:&lt;/a&gt; Upload Files&lt;/h1&gt;

&lt;p&gt;This example will show how to upload files to a specific directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// upload-files.go
package main

import (
    &amp;quot;crypto/md5&amp;quot;
    &amp;quot;fmt&amp;quot;
    &amp;quot;io&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;strconv&amp;quot;
    &amp;quot;time&amp;quot;

    &amp;quot;gopkg.in/kataras/iris.v6&amp;quot;
    &amp;quot;gopkg.in/kataras/iris.v6/adaptors/httprouter&amp;quot;
    &amp;quot;gopkg.in/kataras/iris.v6/adaptors/view&amp;quot;
)

func main() {
    app := iris.New()
    app.Adapt(iris.DevLogger())
    app.Adapt(httprouter.New())
    app.Adapt(view.HTML(&amp;quot;./templates&amp;quot;, &amp;quot;.html&amp;quot;))

    // Serve the form.html to the user
    app.Get(&amp;quot;/upload&amp;quot;, func(ctx *iris.Context) {
        //create a token (optionally)

        now := time.Now().Unix()
        h := md5.New()
        io.WriteString(h, strconv.FormatInt(now, 10))
        token := fmt.Sprintf(&amp;quot;%x&amp;quot;, h.Sum(nil))
        //render the form with the token for any use you like
        ctx.Render(&amp;quot;upload_form.html&amp;quot;, token)
    })

    // Handle the post request from the upload_form.html to the server
    app.Post(&amp;quot;/upload&amp;quot;, iris.LimitRequestBodySize(10&amp;lt;&amp;lt;20),
        func(ctx *iris.Context) {
            // or use ctx.SetMaxRequestBodySize(10 &amp;lt;&amp;lt; 20)
            //to limit the uploaded file(s) size.

            // Get the file from the request
            file, info, err := ctx.FormFile(&amp;quot;uploadfile&amp;quot;)

            if err != nil {
                ctx.HTML(iris.StatusInternalServerError,
                    &amp;quot;Error while uploading: &amp;lt;b&amp;gt;&amp;quot;+err.Error()+&amp;quot;&amp;lt;/b&amp;gt;&amp;quot;)
                return
            }

            defer file.Close()
            fname := info.Filename

            // Create a file with the same name
            // assuming that you have a folder named &#39;uploads&#39;
            out, err := os.OpenFile(&amp;quot;./uploads/&amp;quot;+fname,
                os.O_WRONLY|os.O_CREATE, 0666)

            if err != nil {
                ctx.HTML(iris.StatusInternalServerError,
                    &amp;quot;Error while uploading: &amp;lt;b&amp;gt;&amp;quot;+err.Error()+&amp;quot;&amp;lt;/b&amp;gt;&amp;quot;)
                return
            }
            defer out.Close()

            io.Copy(out, file)
        })

    // start the server at 127.0.0.1:8080
    app.Listen(&amp;quot;:8080&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ tree ./
templates/
└── upload_form.html
uploads/
└──
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run upload-files.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Upload file&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form enctype=&#34;multipart/form-data&#34;
        action=&#34;http://127.0.0.1:8080/upload&#34; method=&#34;post&#34;&gt;
        &lt;input type=&#34;file&#34; name=&#34;uploadfile&#34; /&gt; &lt;input type=&#34;hidden&#34;
            name=&#34;token&#34; value=&#34;{{.}}&#34; /&gt; &lt;input type=&#34;submit&#34; value=&#34;upload&#34; /&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Password Hashing</title>
      <link>http://gopherbook.iris-go.com/password-hashing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gopherbook.iris-go.com/password-hashing/</guid>
      <description>

&lt;h1 id=&#34;go-web-examples-password-hashing&#34;&gt;&lt;a href=&#34;http://gopherbook.iris-go.com/&#34;&gt;Go Web Examples:&lt;/a&gt; Password Hashing&lt;/h1&gt;

&lt;p&gt;This example will show how to hash passwords using bcrypt.
For this we have to &lt;code&gt;go get&lt;/code&gt; the golang bcrypt library like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ go get golang.org/x/crypto/bcrypt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From now on, every application we write will be able to make use of this library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// passwords.go
package main

import (
    &amp;quot;fmt&amp;quot;

    &amp;quot;golang.org/x/crypto/bcrypt&amp;quot;
)

func HashPassword(password string) (string, error) {
    bytes, err := bcrypt.GenerateFromPassword([]byte(password), 14)
    return string(bytes), err
}

func CheckPasswordHash(password, hash string) bool {
    err := bcrypt.CompareHashAndPassword([]byte(hash), []byte(password))
    return err == nil
}

func main() {
    password := &amp;quot;secret&amp;quot;
    hash, _ := HashPassword(password) // ignore error for the sake of simplicity

    fmt.Println(&amp;quot;Password:&amp;quot;, password)
    fmt.Println(&amp;quot;Hash:    &amp;quot;, hash)

    match := CheckPasswordHash(password, hash)
    fmt.Println(&amp;quot;Match:   &amp;quot;, match)
}


&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run passwords.go
Password: secret
Hash:     $2a$14$ajq8Q7fbtFRQvXpdCq7Jcuy.Rx1h/L4J60Otx.gyNLbAYctGMJ9tK
Match:    true
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sessions</title>
      <link>http://gopherbook.iris-go.com/sessions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gopherbook.iris-go.com/sessions/</guid>
      <description>

&lt;h1 id=&#34;go-web-examples-sessions&#34;&gt;&lt;a href=&#34;http://gopherbook.iris-go.com/&#34;&gt;Go Web Examples:&lt;/a&gt; Sessions&lt;/h1&gt;

&lt;p&gt;This example will show how to store data from a session.&lt;/p&gt;

&lt;p&gt;You don&amp;rsquo;t need any third-party library except Iris, but if you want you can use anything, remember Iris is fully compatible with the standard library. You can find a more detailed example by pressing &lt;a href=&#34;https://github.com/kataras/iris/blob/v6/adaptors/sessions/_example/main.go&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this example we will only allow authenticated users to view our secret message on the &lt;code&gt;/secret&lt;/code&gt; page. To get access to it, the will first have to visit &lt;code&gt;/login&lt;/code&gt; to get a valid session cookie, which logs him in. Additionally he can visit &lt;code&gt;/logout&lt;/code&gt; to revoke his access to our secret message.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// sessions.go
package main

import (
    &amp;quot;gopkg.in/kataras/iris.v6&amp;quot;
    &amp;quot;gopkg.in/kataras/iris.v6/adaptors/httprouter&amp;quot;
    &amp;quot;gopkg.in/kataras/iris.v6/adaptors/sessions&amp;quot;
)

var (
    key = &amp;quot;my_sessionid&amp;quot;
)

func secret(ctx *iris.Context) {

    // Check if user is authenticated
    if auth, _ := ctx.Session().GetBoolean(&amp;quot;authenticated&amp;quot;); !auth {
        ctx.EmitError(iris.StatusForbidden)
        return
    }

    // Print secret message
    ctx.WriteString(&amp;quot;The cake is a lie!&amp;quot;)
}

func login(ctx *iris.Context) {
    session := ctx.Session()

    // Authentication goes here
    // ...

    // Set user as authenticated
    session.Set(&amp;quot;authenticated&amp;quot;, true)
}

func logout(ctx *iris.Context) {
    session := ctx.Session()

    // Revoke users authentication
    session.Set(&amp;quot;authenticated&amp;quot;, false)
}

func main() {
    app := iris.New()
    app.Adapt(httprouter.New())

    sess := sessions.New(sessions.Config{Cookie: key})
    app.Adapt(sess)

    app.Get(&amp;quot;/secret&amp;quot;, secret)
    app.Get(&amp;quot;/login&amp;quot;, login)
    app.Get(&amp;quot;/logout&amp;quot;, logout)

    app.Listen(&amp;quot;:8080&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run sessions.go

$ curl -s http://localhost:8080/secret
Forbidden

$ curl -s -I http://localhost:8080/login
Set-Cookie: mysessionid=MTQ4NzE5Mz...

$ curl -s --cookie &amp;quot;mysessionid=MTQ4NzE5Mz...&amp;quot; http://localhost:8080/secret
The cake is a lie!
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Websockets</title>
      <link>http://gopherbook.iris-go.com/websockets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://gopherbook.iris-go.com/websockets/</guid>
      <description>

&lt;h1 id=&#34;go-web-examples-websockets&#34;&gt;&lt;a href=&#34;http://gopherbook.iris-go.com/&#34;&gt;Go Web Examples:&lt;/a&gt; Websockets&lt;/h1&gt;

&lt;p&gt;This example will show how to work with websockets in Go. We will build a simple server which echoes back everything we send to it.
You don&amp;rsquo;t need any third-party library except &lt;code&gt;adaptors/websocket&lt;/code&gt;, but if you want you can use anything. Remember: Iris is fully compatible with the standard library.&lt;/p&gt;

&lt;p&gt;You can find more websocket examples by pressing &lt;a href=&#34;https://github.com/kataras/iris/tree/v6/adaptors/websocket/_examples&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// websockets.go
package main

import (
    &amp;quot;fmt&amp;quot;

    &amp;quot;gopkg.in/kataras/iris.v6&amp;quot;
    &amp;quot;gopkg.in/kataras/iris.v6/adaptors/httprouter&amp;quot;
    &amp;quot;gopkg.in/kataras/iris.v6/adaptors/websocket&amp;quot;
)

func handleConnection(c websocket.Connection) {

    // Read events from browser
    c.On(&amp;quot;chat&amp;quot;, func(msg string) {

        // Print the message to the console
        fmt.Printf(&amp;quot;%s sent: %s\n&amp;quot;, c.Context().RemoteAddr(), msg)

        // Write message back to browser
        c.Emit(&amp;quot;chat&amp;quot;, msg)
    })

}

func main() {
    app := iris.New()
    app.Adapt(httprouter.New())

    // create our echo websocket server
    ws := websocket.New(websocket.Config{
        ReadBufferSize:  1024,
        WriteBufferSize: 1024,
        Endpoint:        &amp;quot;/echo&amp;quot;,
    })

    ws.OnConnection(handleConnection)

    // Adapt the websocket server.
    // you can adapt more than one of course.
    app.Adapt(ws)

    app.Get(&amp;quot;/&amp;quot;, func(ctx *iris.Context) {
        ctx.ServeFile(&amp;quot;websockets.html&amp;quot;, false) // second parameter: enable gzip?
    })

    app.Listen(&amp;quot;:8080&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- websockets.html --&amp;gt;
&amp;lt;input id=&amp;quot;input&amp;quot; type=&amp;quot;text&amp;quot; /&amp;gt;
&amp;lt;button onclick=&amp;quot;send()&amp;quot;&amp;gt;Send&amp;lt;/button&amp;gt;
&amp;lt;pre id=&amp;quot;output&amp;quot;&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;script src=&amp;quot;/iris-ws.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
    var input = document.getElementById(&amp;quot;input&amp;quot;);
    var output = document.getElementById(&amp;quot;output&amp;quot;);

    // Ws comes from the auto-served &#39;/iris-ws.js&#39;
    var socket = new Ws(&amp;quot;ws://localhost:8080/echo&amp;quot;);
    socket.OnConnect(function () {
        output.innerHTML += &amp;quot;Status: Connected\n&amp;quot;;
    });

    socket.OnDisconnect(function () {
        output.innerHTML += &amp;quot;Status: Disconnected\n&amp;quot;;
    });

    // read events from the server
    socket.On(&amp;quot;chat&amp;quot;, function (msg) {
        output.innerHTML += &amp;quot;Server: &amp;quot; + msg + &amp;quot;\n&amp;quot;;
    });

    function send() {
        // send chat event data to the server
        socket.Emit(&amp;quot;chat&amp;quot;, input.value);
        input.value = &amp;quot;&amp;quot;;
    }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go run websockets.go
[127.0.0.1]:53403 sent: Hello Go Web Examples, you&#39;re doing great!
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;demo&#34;&gt;
    &lt;input type=&#34;text&#34;&gt;
    &lt;button&gt;Send&lt;/button&gt;
    &lt;pre&gt;Status: Connected
Server: Hello Go Web Examples, you&#39;re doing great!&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>